14 - Wlasciwosci tablic VBA?
Lekcja zostala podzielona na nastepujace czesci:
Zmiana wielkosci tablicy
Tworzenie tablicy za pomoca funkcji Array
Efektywne pobieranie danych z arkusza i wklejanie tablic do arkusza
Funkcje wbudowane dotyczace tablic
Zmiana wielkosci tablicy
Przy tworzeniu aplikacji bardzo czesto zdarza sie, ze potrzebna jest tabela, która bedzie zmieniala swój rozmiar w trakcie wykonywania programu. Wlasciwie mozna byloby zaryzykowac stwierdzenie, ze takie dynamiczne tabele sa w powaznych aplikacjach wykorzystywane nawet czesciej niz ich statyczne odpowiedniki.

Przypomnij sobie przyklad omówiony w lekcji dwunastej, gdzie uzytkownik wpisywal nazwy w polu InputBox, które nastepnie byly printowane do arkusza. Zalózmy teraz, ze procedura ta ma zostac zmodyfikowana w ten sposób, aby wpisywane przez uzytkownika wyrazy, zamiast wyswietlac sie w arkuszu, byly dodawane do tablicy. Oczywiscie przed rozpoczeciem procedury ostateczny rozmiar tej tablicy jest nieznany, poniewaz nigdy nie wiadomo, ile wyrazów wpisze uzytkownik, zanim zdecyduje sie zamknac okno InputBox.

Ktos móglby w tym miejscu pomyslec, ze wystarczy w takiej sytuacji zadeklarowac odpowiednio duza tablice (np. tablica(1000)), tak aby miec pewnosc, ze zmieszcza sie w niej wszystkie elementy wpisywane przez uzytkownika. Nie jest to jednak zbyt rozsadny pomysl.

Po pierwsze, takiej pewnosci nigdy miec nie mozna. Nawet przy zadeklarowaniu tablicy zawierajacej 1000 elementów, nie mozna zagwarantowac, ze uzytkownik nie bedzie chcial wpisac w oknie InputBox na przyklad 1001 nazw.

Po drugie, w sytuacji kiedy uzytkownik wpisalby przykladowo tylko 2 nazwy, pozostale 998 pól tej tablicy nie byloby wykorzystywane i zupelnie niepotrzebnie marnowalyby pamiec komputera.

Na szczescie jezyk VBA posiada mechanizm pozwalajacy zmieniac rozmiar tablicy w trakcie dzialania makra. Ponizej znajduje sie kod wspomnianej funkcji, wykorzystujacy tablice dynamiczne. Pod ramka z kodem znajduje sie jego analiza wraz ze szczególowym omówieniem schematu zmiany rozmiaru tablicy w trakcie wykonywania kodu.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
Option Base 1

Sub pobieranieNazw()
    Dim nazwa As String                 'nazwa pobierana od uzytkownika
    Dim i As Integer                    'licznik wpisanych nazw
    Dim j As Integer                    'iterator drukowania w arkuszu
    Dim nazwy() As String               'tablica dynamiczna

    Do
        nazwa = InputBox("Wpisz nazwe")
        If Len(nazwa) = 0 Then
            Exit Fo
        Else
            i = i + 1
            ReDim Preserve nazwy(i)
            nazwy(i) = nazwa
       End If
    Loop

    For j = 1 To i
        Cells(j, 1) = nazwy(j)
    Next j
End Sub 
W pierwszym wierszu kodu uzyto omówionego juz podczas tej lekcji polecenia Option Base 1, które okresla, ze wszystkie tablice maja byc domyslnie numerowane od 1, a nie od 0.

W makrze zostaly zadeklarowane cztery zmienne. W trzech pierwszych nie ma nic nadzwyczajnego:
do zmiennej tekstowej nazwa bedzie przypisywany tekst, wprowadzany przez uzytkownika w oknie InputBox,
zmienna liczbowa i bedzie sluzyla jako licznik, zliczajacy liczbe nazw wpisanych przez uzytkownika,
zmienna liczbowa j zostanie wykorzystana w ostatniej czesci makra jako iterator w petli printujacej wszystkie wpisane przez uzytkownika wartosci w arkuszu.
Nowoscia jest natomiast sposób deklaracji zmiennej tablicowej nazwy. Dotychczas, deklarujac tablice, podawalismy jej wymiary juz w wierszu deklaracji. W tym przypadku jednak, zamiast wymiarów tablicy, za nazwa zmiennej znajduje sie tylko pusty nawias:  
Dim nazwy() As String

Taka deklaracja zmiennej tablicowej, bez podania jej rozmiarów, ani nawet liczby wymiarów, jest stosowana zawsze wtedy, kiedy tablica w trakcie dzialania makra ma zmieniac swoje rozmiary lub liczbe wymiarów.

Ponadto okreslamy w tym wierszu, ze tablica nazwy bedzie przechowywala zmienne typu tekstowego.

Jezeli tablica zostala zadeklarowana juz z podanymi rozmiarami i liczba wymiarów, niemozliwa jest zmiana jej rozmiarów.

Jezeli zadeklarowales tablice podajac w momencie jej deklaracji jej poczatkowy rozmiar, tak jak bylo to stosowane w kazdym dotychczasowym przykladzie w tej lekcji:
 
Dim tablica(1,1) As String
nie mozesz potem zmienic jej rozmiaru ani tym bardziej liczby wymiarów.
Przy takiej próbie zostanie wygenerowany blad Compile error: Array already dimensioned.

W wierszach 9-18 znajduje sie nieskonczona petla Do ... Loop, której jedynym warunkiem zakonczenia jest podanie przez uzytkownika w oknie InputBox pustego tekstu.

Przy kazdym powtórzeniu tej petli uzytkownik wpisuje w oknie InputBox jakas nazwe, która jest potem przypisywana do zmiennej nazwa (wiersz 10).

Nastepnie sprawdzana jest dlugosc tej nazwy (wiersz 11).

Jezeli zmienna nazwa jest pusta (a wiec uzytkownik wcisnal w oknie InputBox przycisk Anuluj lub zatwierdzil pusty tekst), wykonywane jest polecenie Exit Do, czyli opuszczenie petli (wiersz 12).

Jezeli natomiast uzytkownik wprowadzil jakis tekst w oknie InputBox (czyli dlugosc zmiennej nazwa jest wieksza od zera), wykonywany jest blok operacji znajdujacy sie w wierszach 14-16.

Najpierw zwiekszana jest o 1 wartosc licznika i. Zmienna i posiada w kazdym momencie taka wartosc, ile nazw zostalo aktualnie podanych przez uzytkownika. Dzieki temu latwo jest potem nadac tablicy nazwy odpowiedni rozmiar, czyli dokladnie taki, ile zmiennych ma ona przechowywac. W momencie uruchomienia makra zmienna i ma oczywiscie wartosc 0, poniewaz uzytkownik nie zdazyl jeszcze wprowadzic zadnej nazwy, ale przy kazdym kolejnym wprowadzeniu nazwy jest zwiekszana o 1.

W kolejnym wierszu:
15
ReDim Preserve nazwy(i)
dokonywana jest zmiana rozmiaru tablicy. Slowem kluczowym sluzacym do rozszerzania lub zwezania tablicy jest ReDim.

Slowo Preserve informuje natomiast kompilator, ze przy zmianie rozmiarów tablicy maja zostac zapamietane wszystkie wartosci, które dotychczas przechowywala ta tablica (zastosowanie slowa kluczowego Preserve omówimy nieco dokladniej w dalszej czesci tego podrozdzialu).

Po slowach kluczowych ReDim Preserve nalezy podac nazwe tablicy, której rozmiar ma byc zmieniony oraz okreslic w nawiasie okraglym nowy rozmiar tej tablicy.

Zalózmy, ze po uruchomieniu makra, uzytkownik chce w pojawiajacym sie na ekranie oknie InputBox wprowadzac nazwy panstw.

Kiedy wykonywanie kodu dojdzie do wiersza 9, uruchamiana jest opisana wczesniej petla, która przy kazdym swoim powtórzeniu wyswietla okno InputBox, a nastepnie rozszerza tablice i dodaje do niej wpisana wlasnie nazwe.

W wierszu 10 uzytkownik wpisuje pierwsza nazwe panstwa, np. Polska. W kolejnym wierszu kompilator sprawdza czy wpisana nazwa nie jest pustym ciagiem znaków i po stwierdzeniu, ze nie przenosi wykonywanie kodu do bloku Else tej instrukcji warunkowej, a wiec do wiersza 14. Tutaj pierwsza czynnoscia jest zwiekszenie wartosci zmiennej licznikowej i, tak aby przechowywala aktualna liczbe wpisanych nazw. Dotychczas licznik wynosil 0, teraz po wpisaniu pierwszej nazwy, jego wartosc zostaje ustawiona na 1.

W kolejnym wierszu (15) aktualizowany jest rozmiar tablicy nazwy.

Jak na razie w zadnym miejscu kodu nie ustalano jeszcze liczby wymiarów, ani rozmiarów dla tablicy nazwy. Zostala jedynie zadeklarowana jej obecnosc w kodzie wraz z informacja, ze bedzie to tablica dynamicznie zmieniajaca swój rozmiar. Do takiej tablicy niemozliwe byloby przypisanie zadnej wartosci, gdyz kompilator nie wydzielil w niej jeszcze pól (a jak pamietasz z poprzedniej lekcji, wartosci przypisywane sa do poszczególnych pól tablicy, a nie do calej tablicy). Zmienna nazwy stanie sie pelnoprawna tablica dopiero w momencie jej inicjalizacji, czyli przy ustaleniu jej liczby wymiarów i okresleniu jej poczatkowego rozmiaru.

W omawianym przez nas przykladzie, tablica nazwy zostaje zainicjowana jako tablica jednowymiarowa o rozmiarze 1, poniewaz polecenie 15
ReDim Preserve nazwy(i)
zostaje po raz pierwszy wywolane w wierszu 15, po tym jak uzytkownik wpisal w oknie InputBox pierwsza nazwe, a zmienna licznikowa i przybrala tym samym wartosc 1.

Kiedy wykonywanie kodu dociera do wiersza 16, tablica nazwy jest juz wiec tablica jednowymiarowa o rozmiarze 1. Teraz, za pomoca polecenia
16
nazwy(i) = nazwa
w jej ostatnim polu zostaje umieszczona wartosc, która przed chwila uzytkownik wpisal w polu InputBox (przechowywana tymczasowo w zmiennej nazwa; przypisanie tekstu wpisanego przez uzytkownika do tej zmiennej odbywa sie w wierszu 10).
Napisalem "w jej ostatnim polu", poniewaz nazwy(i), czyli pole tablicy nazwy o indeksie równym zmiennej licznikowej i, zawsze bedzie ostatnim polem tej tablicy. Wynika to z tego, ze tuz przed ta operacja, w wierszu 15, tablica nazwy jest zawsze rozszerzana wlasnie do wielkosci równej zmiennej licznikowej i. Dla przypomnienia, zmienna i w kazdym momencie dzialania makra jest równa liczbie nazw wpisanych przez uzytkownika, dzieki temu tablica nazwy za kazdym razem jest rozszerzana tylko i wylacznie w takim stopniu, aby mogla przechowywac wszystkie wpisane nazwy.

Na razie uzytkownik wpisal jedna nazwe (np. Polska), tablica nazwy jest wiec jednowymiarowa tablica o rozmiarze 1 i wpisie Polska w jej jedynym polu.

Kompilator natrafia teraz na wiersz 18, bedacy zamknieciem petli Do ... Loop i odsyla wykonywanie kodu z powrotem do wiersza 9, na poczatek tej petli.

Na ekranie ponownie pojawia sie okno InputBox, w którym uzytkownik musi wpisac nazwe (zalózmy, ze wpisal Czechy). Wpisana przez niego nazwa jest najpierw przypisywana do zmiennej tekstowej nazwa, nastepnie o 1 zwiekszana jest wartosc zmiennej licznikowej i (wiersz 14), tak aby uwzgledniala wpisana przed chwila nazwe.

W kolejnych dwóch wierszach kodu tablica nazwy(i) ponownie zostaje rozszerzona, tym razem staje sie tablica jednowymiarowa o rozmiarze 2. W pierwszym polu, dzieki zastosowaniu slowa kluczowego Preserve, nadal przechowywany jest tekst Polska, do drugiego pola - nazwy(2) - zostaje natomiast przypisany tekst Czechy, czyli tekst wpisany przez uzytkownika przy drugim wyswietleniu okna InputBox.

Caly proces jest powtarzany tak dlugo, az uzytkownik kliknie w oknie InputBox przycisk Anuluj/Cancel lub zatwierdzi pusty tekst. W takiej sytuacji kompilator wychodzi z petli Do ... Loop, znajdujacej sie w wierszach 9-18, i przechodzi do petli For ... Next w wierszach 20-22. Ta petla jest juz Tobie doskonale znana i nie wymaga szczególowego omówienia. Wystarczy napisac, ze jest ona odpowiedzialna za wyswietlenie w arkuszu wszystkich wpisów przechowywanych w tablicy nazwy(i).

Szczególowego omówienia wymaga jeszcze zastosowanie slowa kluczowego Preserve, które pojawilo sie juz w poprzednim przykladzie.

Jak juz wczesniej wspomnialem, uzycie slowa Preserve jest dla kompilatora sygnalem, ze przy kazdej zmianie rozmiarów tablicy, wszystkie wartosci dotychczas przechowywane w tej tablicy maja byc w niej zachowane i znajdowac sie w niej równiez po jej przeskalowaniu. Niesie to ze soba mniej lub bardziej istotne konsekwencje, które omówimy w dalszej czesci tego podrozdzialu.

Aby dokladniej wyjasnic róznice wynikajaca z zastosowania lub pominiecia slowa kluczowego Preserve, wrócmy do omówionego przed chwila makra, którego dzialanie polegalo na pobieraniu nazw od uzytkownika i zapisywaniu ich w tablicy zmiennych tekstowych.

Ustaw punkt zatrzymania w wierszu zamkniecia petli Do ... Loop (18), a nastepnie uruchom makro.

Powrót do poczatku lekcji Tworzenie tablicy za pomoca funkcji Array
Zdarzaja sie sytuacje, ze w kodzie trzeba uzyc tablicy, której elementy powinny byc przypisane recznie, a nie wczytywane z arkusza, bazy danych czy jeszcze jakiegos innego zródla.

Za przyklad moze posluzyc tablica zawierajaca nazwy miesiecy: miesiecy jest 12, ich nazwy sa zawsze takie same i nie zanosi sie na to, aby cos w tej kwestii uleglo zmianie. Dlatego nie ma przeszkód, aby elementy do tej tablicy przypisac recznie, bezposrednio w kodzie VBA: 1
2
3
4
5
6
7
8
9
10
11
12
13
14
Dim miesiace(12) As String

miesiace(1) = "styczen"
miesiace(2) = "luty"
miesiace(3) = "marzec"
miesiace(4) = "kwiecien"
miesiace(5) = "maj"
miesiace(6) = "czerwiec"
miesiace(7) = "lipiec"
miesiace(8) = "sierpien"
miesiace(9) = "wrzesien"
miesiace(10)= "pazdziernik"
miesiace(11)= "listopad"
miesiace(12)= "grudzien"

Móglbys sobie w tym miejscu pomyslec: Dobrze, ale przeciez wczesniej bylo powiedziane, ze zamiast pisac tyle linijek recznie, lepiej zastosowac petle, która wczyta te nazwy z arkusza. Faktycznie, na pewno kod bylby w takiej sytuacji krótszy, ale nazwy miesiecy do arkusza tez trzeba byloby wpisac recznie, wiec takie rozwiazanie raczej nie oszczedziloby zbyt duzo pisania.

Oczywiscie nic nie stoi na przeszkodzie, zeby wypisac nazwy miesiecy w arkuszu i wczytac je za pomoca petli (tak, jak to zostalo pokazane w podrozdziale dotyczacym przypisywania wartosci do tablic). Nie jest to jednak optymalne rozwiazanie, gdyz niepotrzebnie angazuje w te procedure arkusz Excela, a trzeba zaznaczyc, ze odwolywanie sie do arkusza jest dla kompilatora wykonujacego kod bardzo pracochlonnym i pamieciozernym zadaniem.

Jedyna wada rozwiazania przedstawionego w powyzszej ramce z kodem jest jego rozwleklosc - cala deklaracja zajmuje az 12 linijek.

Powrót do poczatku lekcji Efektywne pobieranie danych z arkusza i wklejanie tablic do arkusza
W poprzedniej lekcji, omawiajacej podstawy tablic VBA, dowiedziales sie jak wczytywac do tablicy VBA dane z arkusza Excela. Chociaz przedstawiony tam sposób, polegajacy na zastosowaniu petli For ... Next, dobrze sprawdza sie na niewielkich zakresach danych (tak jak 12 wierszy i 2 kolumny w przytoczonym przykladzie), to jednak ze wzgledu na swoja czasochlonnosc nie nadaje sie raczej do pobierania wiekszych zakresów danych.

W pliku tablice2.xls, który powinienes pobrac na swój dysk na potrzeby tej lekcji, znajduje sie zakres danych skladajacy sie z 10000 wieszy i 15 kolumn. Przedstawiona ponizej procedura dokonuje wczytania tych danych do tablicy VBA za pomoca petli For ... Next, tak jak bylo to praktykowane w poprzedniej lekcji, co, jak juz wspomnialem, jest metoda bardzo nieefektywna. 1
2
3
4
5
6
7
8
9
10
11
12
13
Option Explicit
Option Base 1
Sub pobieranieDanychZArkusza()
    Dim dane(10000, 15) As Variant
    Dim i As Long
    Dim j As Integer

    For i = 1 To 10000
        For j = 1 To 15
            dane(i, j) = Cells(i, j)
        Next j
    Next i
End Sub

W procedurze zadeklarowane zostaly 3 zmienne: zmienna tablicowa dane i zmienne iteracyjne i oraz j, które posluza do przejscia petla For ... Next przez wszystkie wiersze i kolumny arkusza.

Zmienna tablicowa zostala zadeklarowana jako typ Variant, poniewaz w róznych kolumnach arkusza moga sie znajdowac rózne typy danych (teksty, liczby, daty), co uniemozliwia jednoznaczne okreslenie typu. Ponadto zostala ona okreslona jako tablica dwuwymiarowa o rozmiarach 10000x15, poniewaz tyle wlasnie wierszy i kolumn danych znajduje sie w arkuszu.

Oddzielna kwestia pozostaje fakt, ze liczba wierszy i kolumn zostala w tym przykladzie sztywno okreslona na 10000 i 15, co nie jest oczywiscie zbyt dobrym rozwiazaniem. Optymalnym wyjsciem byloby, gdyby makro samo rozpoznawalo ile wierszy i kolumn danych znajduje sie w arkuszu, tak aby procedura byla jak najbardziej uniwersalna i mogla byc stosowana we wszystkich sytuacjach, niezaleznie od ilosci danych zawartych w arkuszu. Oczywiscie napisanie takiej procedury, która sama okresla ilosc wierszy i kolumn danych w arkuszu, jest jak najbardziej mozliwe i nauczymy sie jak to zrobic w lekcji szczególowo omawiajacej operacje na zakresach komórek. Na razie skupmy sie jednak na zoptymalizowaniu wczytywania danych z arkusza do tablicy.

Przed uruchomieniem procedury ustaw jeszcze punkt zatrzymania w wierszu jej zamkniecia (End Sub ), aby po wykonaniu wczytywania danych sprawdzic zawartosc tablicy dane.
Jezeli uruchomisz teraz procedure wczytywanieDanych, to po dotarciu wykonywania kodu do punktu zatrzymania tablica dane zawiera dokladnie takie same wartosci, jakie znajduja sie w arkuszu. Problem polega jednak na tym, ze cala operacja zajmuje sporo czasu, a przeciez arkusz moze zawierac znacznie wiecej danych.

Na szczescie jezyk VBA oferuje jeszcze inny, nieporównywalnie szybszy, sposób masowego pobierania danych z arkuszy Excela. Polega on na zadeklarowaniu zmiennej typu Variant i przypisaniu do niej zakresu komórek arkusza. Operacjami na arkuszach, komórkach i zakresach zajmiemy sie szczególowo w dalszej czesci kursu, na razie nauczysz sie tylko jak okreslic pojedynczy zakres, tak aby móc go wczytac do tablicy VBA.

Skopiuj i wklej do edytora VBA nastepujacy kod: 1
2
3
4
5
Option Explicit
Sub efektywneWczytywanieDanych()
    Dim dane As Variant
    dane = Range(Cells(1, 1), Cells(10000, 15))
End Sub

Pomimo swojej znacznej przewagi w szybkosci dzialania, caly kod jesst zaskakujaco latwy do zrozumienia i o wiele krótszy niz metoda wykorzystujaca petle, co jest tylko jego dodatkowym atutem.

Jak juz wczesniej wspomnialem, w procedurze nalezy zadeklarowac zmienna typu Variant. Zwróc jednak uwage, ze nie ma byc to zmienna tablicowa typu Variant, jak mialo to miejsce przy pierwszym sposobie, lecz zwykla zmienna typu Variant, przeznaczona do przechowywania pojedynczej wartosci nieznanego typu.

W czwartym wierszu procedury, do zmiennej dane przypisywany jest zakres komórek arkusza, zawierajacy interesujace nas dane.

Zakresy komórek okreslane sa w VBA poprzez nastepujacy zapis:
 
Range(komórka_poczatkowa, komórka_koncowa)
w którym komórka_poczatkowa to komórka znajdujaca sie w lewym górnym rogu zakresu, a komórka_koncowa w jego prawym dolnym rogu.

Aby poinformowac kompilator o wspólrzednych komórki poczatkowej i koncowej, nalezy skorzystac z zapisu znanego juz z poprzednich lekcji:  
Cells(wiersz, kolumna)

Ostateczny zapis zakresu obejmujacego wiersze od 1 do 10000 oraz kolumny od 1 do 15 bedzie przedstawial sie nastepujaco:  
Range(Cells(1, 1), Cells(10000, 15))

Ustaw teraz punkt zatrzymania w ostatnim wierszu procedury, a nastepnie uruchom makro. Kiedy wykonanie kodu dotrze do konca procedury i dzialanie makra zostanie wstrzymane, mozesz podejrzec w oknie Locals wartosci przypisane do poszczególnych pól tablicy dane i przekonac sie, ze niczym nie róznia sie one od wartosci przypisanych wczesniej przy zastosowaniu petli.

Róznica w czasie wykonania obu procedur jest wyrazna, chociaz na dosyc malym zakresie danych, jakim jest 150000 komórek (10000 wierszy x 15 kolumn), nie jest ona zauwazalna golym okiem. Podczas gdy przy wykorzystaniu petli wczytanie wartosci do tablicy VBA zajelo 1.7 sekundy, to stosujac metode przypisania zakresu komórek do zmiennej typu Variant caly proces trwal tylko 0.1 sekundy.
Na wiekszym zakresie danych (10800000 komórek - 60000 wierszy x 180 kolumn), efektywne wczytanie danych dzieki przypisaniu zakresu zajelo tylko 7 sekund, natomiast sposób wykorzystujacy petle zajal az 130 sekund, co raczej dyskwalifikuje stosowanie tej metody z uwagi na zbyt duza czasochlonnosc.

Podczas omawiania typów zmiennych, zwrócilem uwage na to, ze zmienne typu Variant sa najbardziej pamieciozerne itylko w nielicznych sytuacjach ich uzycie jest uzasadnione. Omówione powyzej przyklad jest wlasnie jedna z takich wyjatkowych sytuacji, gdzie skorzystanie z uniwersalnego typu zmiennej Variant przynosi o wiele wiecej korzysci niz szkód. Zreszta nawet przy stosowaniu nieefektywnej metody wczytywania danych (z uzyciem petli For ... Next), tablica musialaby byc zadeklarowana jako tablica przechowujaca zmienne typu Variant, z uwagi na nieznany typ danych wczytywanych do tej tablicy z arkusza.

Podobnie rzecz ma sie z zapisem wartosci z tablicy do arkusza. W tym przypadku róznica w efektywnosci równiez jest wyraznie widoczna.

Jednym ze sposobów na wyprintowanie tablicy VBA w arkuszu Excela jest zastosowanie dwóch petli For ... Next, które przechodza kolejno przez wszystkie wiersze i kolumny tablicy VBA i zapisuja poszczególne wartosci do arkusza. Taki sposób jest oczywiscie zupelnie prawidlowy i doskonale sprawdzilby sie na niewielkich zakresach danych. Jednak w przypadku wiekszych tablic, czas wypisywania danych do komórek Excela znacznie sie wydluza, sprawiajac, ze korzystanie z tej metody staje sie malo oplacalne.

Tak samo, jak w przypadku pobierania danych z arkusza, z pomoca ida operacje na zakresach komórek. W ponizszej ramce z kodem znajduje sie przyklad obrazujacy wykorzystanie zakresów komórek do efektywnego zapisu wartosci tablicy VBA do arkusza Excela.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Option Explicit

Sub efektywneZapisywanieDanychDoArkusza()
    Dim arr(20000, 15) As Long
    Dim i As Integer
    Dim j As Integer

    For i = 1 To 20000
        For j = 1 To 15
            arr(i, j) = Rnd
        Next j
    Next i

    Range(Cells(1, 1), Cells(20000, 15)) = arr
End Sub
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
Option Explicit

Sub efektywneZapisywanieDanychDoArkusza()
    Dim arr(20000, 15) As Long
    Dim i As Integer
    Dim j As Integer

    For i = 1 To 20000
        For j = 1 To 15
            arr(i, j) = Rnd
        Next j
    Next i

    Range(Cells(1, 1), Cells(20000, 15)) = arr
End Sub
W kodzie zadeklarowana zostala dwuwymiarowa tablica o rozmiarach 20000 wierszy x 15 kolumn, przechowujaca zmienne liczbowe. Zwróc uwage, ze inaczej niz to mialo miejsce w przypadku pobierania wartosci z arkusza Excela do tablicy VBA, podczas zapisywania danych z tablicy VBA do arkusza tablica nie musi byc zmienna typu Variant, lecz dowolna zmienna tablicowa (czyli taka, dla której funkcja IsArray zwraca wartosc True; wiecej o dzialaniu funkcji IsArray dowiesz sie w jednym z kolejnych podrozdzialów).

W wierszach 8-12 tablica arr zostala wypelniona losowymi liczbami za pomoca podwójnej petli oraz funkcji generujacej liczby losowe - Rnd. Caly ten zabieg sluzyl tylko stworzeniu jakiejs odpowiednio duzej, zapelnionej wartosciami tablicami VBA, na której mozna byloby zobrazowac efektywnosc wykorzystania zakresów komórek.

W kolejnym wierszu (14) znajduje sie juz wlasciwe polecenie sluzace przeniesieniu wartosci z tablicy VBA do komórek Excela: 14
Range(Cells(1, 1), Cells(20000, 15)) = arr

Skladnia tego polecenia wyglada niemal identycznie, jak w przypadku pobierania danych z arkusza, z ta tylko róznica, ze obie strony przypisania zostaly zamienione miejscami - teraz to zakres znajduje sie z lewej strony i do niego po znaku równosci przypisywana jest tablica arr.

Powrót do poczatku lekcji Funkcje wbudowane dotyczace tablic
Wsród funkcji wbudowanych jezyka VBA znalezc mozna trzy funkcje, które zwracaja wlasciwosci tablic:
IsArray - sprawdza czy zmienna podana jako argument jest tablica,
LBound, UBound - zwraca najnizszy lub najwyzszy indeks dla podanego wymiaru tablicy.
Przytoczone funkcje zostaly pominiete w lekcji poswieconej funkcjom wbudowanym, poniewaz nie byles wtedy jeszcze zaznajomiony z tablicami. Teraz, kiedy deklarowanie i korzystanie z tablic nie jest juz Ci obce, nic nie stoi na przeszkodzie, aby omówic te bardzo przydatne funkcje.

IsArray
Pierwsza z omawianych funkcji jest funkcja IsArray, sprawdzajaca czy podany argument jest tablica.

Skladnia tej funkcji wyglada nastepujaco:  
Function IsArray(value As Variant) As Boolean

Jako argument Value moze zostac podana wartosc dowolnego typu.

Funkcja zwróci blad, jezeli przy jej wywolaniu zostanie pominiety argument Value.

Jak nietrudno sie domyslic, funkcja zwraca wartosc True, jezeli argument jest tablica, oraz wartosc False, jezeli argument nie jest tablica.
Funkcja IsArray zwraca wartosc True takze dla zmiennych typu Variant, które w trakcie dzialania makra staly sie tablicami. Dotychczas poznales dwie sytuacje, kiedy zmienna Variant moze stac sie tablica - przypisanie do niej zakresu z arkusza lub wyniku funkcji Array.

Ponizej znajdziesz przyklad obrazujacy wykorzystanie funkcji IsArray: 1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
Sub testTablic()
    Dim arr() As String
    Dim i As Integer

    If IsArray(arr) Then
        Debug.Print "Zmienna arr jest tablica"
    Else
        Debug.Print "Zmienna arr nie jest tablica"
    End If

    If IsArray(i) Then
        Debug.Print "Zmienna i jest tablica"
    Else
        Debug.Print "Zmienna i nie jest tablica"
    End If
End Sub

W makrze zadeklarowane zostaly dwie zmienne, która zostana nastepnie sprawdzone funkcja IsArray. Pierwsza z nich to zmienna arr, zadeklarowana jako tablica dynamiczna, czyli tablica, której rozmiar i liczba wymiarów moze zmieniac sie w trakcie dzialania makra. Druga zmienna jest natomiast zmienna i, bedaca zwyczajna zmienna typu Integer.

W kolejnych linijkach kodu (wiersze 5-9) znajduje sie instrukcja warunkowa, sprawdzajaca czy zmienna arr jest traktowana przez omawiana funkcje IsArray jako tablica. Po uruchomieniu makra instrukcja warunkowa wypisze w oknie Immediate napis Zmienna arr jest tablica lub Zmienna arr nie jest tablica, w zaleznosci od wyniku funkcji IsArray. W dalszej czesci procedury znajduje sie identyczna instrukcja warunkowa przeznaczona dla zmiennej liczbowej i.

Po uruchomieniu procedury zauwazysz w oknie Immediate, ze w przypadku zmiennej tablicowej arr funkcja IsArray() zwrócila wartosc True, natomiast dla zmiennej liczbowej i zwrócona zostala wartosc False.

Wyniki dzialania funkcji IsArray

Na wynik zwracany przez funkcje IsArray trzeba zwracac szczególna uwage, jezeli jako argument podawana jest zmienna, do której przypisano wartosci pobrane bezposrednio z arkusza. W podrozdziale poswieconym efektywnemu pobieraniu wartosci z arkusza dowiedziales sie, ze po przypisaniu do zmiennej typu Variant zakresu komórek z arkusza, zmienna ta staje sie dwuwymiarowa tablica o rozmiarach odpowiadajacych rozmiarom tego zakresu i wartosciach odpowiadajacych wartosciom poszczególnych komórek Excela, znajdujacych sie w tym zakresie. Od tej zasady istnieje jednak wyjatek, o którym opowiem ponizej.

Kiedy do zmiennej typu Variant przypisywany jest zakres skladajacy sie tylko z jednej komórki, mozna byloby sie spodziewac, ze zmienna ta stanie sie dwuwymiarowa tablica o rozmiarach 1x1. W rzeczywistosci jednak, zmienna ta przybiera po prostu pojedyncza wartosc, dokladnie taka, jaka znajduje sie w jedynej komórce wskazanego zakresu. Aby dokladnie zrozumiec te kwestie przeanalizuj ponizszy przyklad: 1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
Sub przypisywanieZakresowDoZmiennej()
    Dim pojedynczaKomorka As Variant
    Dim wieleKomorek As Variant

    'Przypisanie jednej komórki
    pojedynczaKomorka = Range(Cells(1, 1), Cells(1, 1))

    'Przypisanie wielu komórek
    wieleKomorek = Range(Cells(1, 1), Cells(2, 2))

    If IsArray(pojedynczaKomorka) Then
        Debug.Print "Zmienna pojedycznaKomorka jest tablica"
    Else
        Debug.Print "Zmienna pojedycznaKomorka nie jest tablica"
    End If

    If IsArray(wieleKomorek) Then
        Debug.Print "Zmienna wieleKomorek jest tablica"
    Else
        Debug.Print "Zmienna wieleKomorek nie jest tablica"
    End If

End Sub

W przedstawionej ramce z kodem zadeklarowane zostaly dwie zmienne typu Variant: pojedynczaKomorka, do której przypisany zostanie zakres jednokomórkowy, oraz wieleKomorek, do której przypiszemy wiekszy zakres.

W kolejnych wierszach kodu znajduja sie dwie instrukcje warunkowe, które sprawdzaja kolejno kazda z tych dwóch zmiennych i wyswietlaja w oknie Immediate odpowiedni komunikat - nazwe rozpatrywanej zmiennej oraz tekst jest tablica lub nie jest tablica, w zaleznosci od wyniku funkcji IsArray.

Po uruchomieniu procedury, w oknie Immediate pojawi sie nastepujacy wpis:

Wyniki dzialania funkcji IsArray

Potwierdza to, ze zmienne Variant, do których przypisano jednokomórkowy zakres, nie sa przez kompilator traktowane jako tablice.

Istnieje jeszcze jeden latwy sposób, abys przekonal sie o istnieniu powyzszej zasady, wykorzystujacy w tym celu okno Locals.

W przedstawionym wyzej kodzie ustaw punkt zatrzymania w ostatniej linijce procedury, a nastepnie uruchom makro.

W momencie, gdy wykonanie kodu zostane wstrzymane, przejdz do okna Locals. Jak widac na ponizszym rysunku (i na Twoim monitorze), zmienna pojedynczaKomorka jest traktowana jako zwykla wartosc (nie istnieje nawet mozliwosc jej rozwiniecia, tak jak ma to miejsce w przypadku tablic), zmienna wieleKomorek jest natomiast przedstawiona jako tablica, która mozna rozwinac, aby podejrzec wartosci jej poszczególnych pól.

Ten z pozoru blahy i nieistotny problem moze czasem spowodowac powazne bledy w dzialaniu aplikacji, o czym przekonasz sie w jednej z kolejnych lekcji.

LBound, UBound
LBound i UBound to bardzo przydatne funkcje, umozliwiajace sprawdzenie granicy poszczególnych wymiarów tablicy.

Skladnia tych funkcji przedstawia sie nastepujaco:  
 
Function LBound(array As Variant, Optional dimension As Byte) As Integer
Function UBound(array As Variant, Optional dimension As Byte) As Integer

Jako argument array nalezy podac tablice, której rozmiary maja byc sprawdzone.

Zmienna dimension reprezentuje wymiar, którego rozmiar ma byc sprawdzony. Jest to zmienna opcjonalna, która przy wywolywaniu funkcji moze zostac pominieta - w takim przypadku domyslnie sprawdzany jest rozmiar dla pierwszego wymiaru tablicy.

Funkcja LBound zwraca dolna granice poszczególnych wymiarów tablicy, natomiast funkcja UBound górna granice.

Przykladowo dla tablicy zadeklarowanej w nastepujacy sposób:
 
Dim arr(-5To 5, 1 To 10) As Variant
funkcja LBound(arr, 1) zwróci wartosc -5 (poniewaz dolna granica pierwszego wymiaru tej tablicy wynosi -5), natomiast funkcja UBound(arr, 2) zwróci wartosc 10 (gdyz górna granica drugiego wymiaru wynosi 10). Wiecej przykladów dzialania funkcji LBound i UBound znajdziesz w dalszej czesci tego podrozdzialu.

Funkcje LBound i UBound sa bardzo wrazliwe, jezeli chodzi o poprawnosc przekazywanych do nich argumentów.

Aby wywolanie tych funkcji nie spowodowalo bledu, jako argument array musi zostac podana zmienna tablicowa, czyli taka, dla której omówiona niedawno funkcja IsArray zwraca wartosc True.
Jezeli wywolujac któras z tych funkcji, jako argument array podasz zmienna nie bedaca tablica, moze dojsc do jednej z dwóch opisanych ponizej sytuacji:
jezeli zmienna, która przekazales do funkcji LBound lub UBound byla zadeklarowana jako zmienna typu podstawowego innego niz Variant (np. String lub Byte) lub obiekt (o obiektach omówimy szczególowo w drugiej czesci kursu), kompilator nie zezwoli nawet na uruchomienie makra i wyswietli na ekranie blad Compile error: Expected array. Dzieje sie tak, poniewaz dla kompilatora juz przed uruchomieniem makra jest oczywiste, ze zmienna ta nie bedzie tablica i spowoduje blad w programie, dlatego próbuje zapobiec temu jeszcze przed rozpoczeciem dzialania makra.
jezeli zmienna, przekazana do funkcji LBound lub UBound, jest zmienna typu Variant, kompilator przed uruchomieniem makra nie moze wiedziec czy zmienna ta nie bedzie tablica. Jak dowiedziales sie wczesniej podczas tej lekcji, istnieje kilka sytuacji, kiedy zmienna typu Variant moze stac sie tablica - mozna przykladowo przypisac do niej zakres z arkusza lub wynik funkcji Array. W zwiazku z tym, kompilator normalnie rozpoczyna wykonywanie makra i jesli w momencie wywolania funkcji okazuje sie, ze przekazywana do niej zmienna nie jest tablica, dzialanie makra zostaje wstrzymane, a na ekranie wyswietlany jest blad Run time error '13': Type mismatch.
Pewne zastrzezenia dotycza takze drugiego z argumentów tych funkcji - dimension. Wartosc tego argumentu musi byc dodatnia liczba naturalna i to taka, która nie przekracza liczby wymiarów rozpatrywanej tablicy array. Nie mozna wiec przykladowo wywolac funkcji UBound(arr, 3), jesli tablica arr zostala zadeklarowana jako tablica dwuwymiarowa. W takiej sytuacji wygenerowany zostanie blad: Run time error '9': Subscript out of range.

Ponizej znajduje sie kilka przykladów dzialania funkcji LBound oraz UBound dla dwuwymiarowej tablicy zadeklarowanej z nastepujacymi rozmiarami: arr(-5 To 5, 1 To 10).

FUNKCJA	WYNIK	UWAGI
LBound(arr, -1)	blad	argument dimension musi byc dodatnia liczba naturalna
UBound(arr, 'a')	blad	argument dimension musi byc dodatnia liczba naturalna
LBound(arr)	-5	pominieto argument dimension, wiec domyslnie sprawdzana jest dolna granica dla pierwszego wymiaru
LBound(arr, 1)	-5	
LBound(arr, 2)	1	
UBound(arr)	5	pominieto argument dimension, wiec domyslnie sprawdzana jest górna granica dla pierwszego wymiaru
UBound(arr, 2)	10	
UBound(arr, 3)	blad	zgodnie z zalozeniem, tablica arr posiada dwa wymiary, nie mozna wiec sprawdzic górnej granicy dla trzeciego wymiaru
Powrót do poczatku lekcji