10 - Petla For … Next?
Tematem tej lekcji beda petle, dzieki którym mozna latwo zautomatyzowac wielokrotne wykonywanie identycznej czynnosci w kodzie, takiej jak np. wyswietlanie wartosci w kolejnych wierszach arkusza.

Lekcja zostala podzielona na nastepujace czesci:
Podstawowe informacje o petlach
Zmiana kroku petli
Zmiana wartosci iteratora wewnatrz petli
Opuszczenie petli przed jej zakonczeniem
Zagniezdzanie petli
Podstawowe informacje o petlach
W przykladach zamieszczonych w poczatkowych lekcjach kursu pojawilo sie makro printujace w arkuszu kolejne potegi poszczególnych liczb. Makro to przedstawialo sie nastepujaco: 1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Sub wyswietlajPotegi(liczba As Byte, numerKolumny As Byte)
    Dim potega As Long

    potega = 1
    Worksheets("Arkusz1").Cells(1, numerKolumny) = potega

    potega = potega * liczba
    Worksheets("Arkusz1").Cells(2, numerKolumny) = potega

    potega = potega * liczba
    Worksheets("Arkusz1").Cells(3, numerKolumny) = potega

    potega = potega * liczba
    Worksheets("Arkusz1").Cells(4, numerKolumny) = potega

    potega = potega * liczba
    Worksheets("Arkusz1").Cells(5, numerKolumny) = potega

End Sub

Za wyswietlanie kazdej kolejnej potegi odpowiedzialna byla oddzielna linijka kodu. Zgodnie z zalozeniem, makro mialo wypisac tylko piec pierwszych poteg danej liczby, dlatego w miare latwo bylo stworzyc dla kazdej z nich oddzielny wiersz.

Zwróc jednak uwage, ze wszystkie linijki drukujace poszczególne potegi w arkuszu sa do siebie blizniaczo podobne (róznia sie tylko numerem wiersza). Zawsze gdy napotkasz w kodzie niemal identyczne fragmenty, powinno to zwrócic Twoja uwage - prawdopodobnie mozna z tych fragmentów stworzyc jeden wspólny, korzystajac z jakichs wbudowanych elementów jezyka VBA (np. petli, tak jak w tym przypadku) lub piszac wlasna funkcje. Dzieki stworzeniu uniwersalnego fragmentu kodu, zastepujacego kilka podobnych fragmentów, caly kod bedzie latwiejszy do zrozumienia i zajmie mniej miejsca, a w razie potrzeby wprowadzenia pózniej jakichkolwiek zmian, bedzie trzeba zmodyfikowac tylko ten jeden wspólny fragment, zamiast kilku podobnych kawalków porozrzucanych po calej aplikacji.

Przytoczona powyzej argumentacja powinna wystarczyc, abys przekonal sie, ze dotychczasowa postac kodu printujacego potegi nie jest optymalna. Jest jednak jeszcze jeden argument, mozna by rzec, ze koronny. Wyobraz sobie bowiem sytuacje, w której musialbys zmodyfikowac powyzsze makro tak, aby zamiast pieciu pierwszych poteg, wyswietlalo ich 50 (albo napisac inne makro, które ma wyswietlic jakas okreslona wartosc dla 10 tysiecy wierszy). Oczywiscie reczne wpisywanie jednego wiersza po drugim, tak jak to bylo dotychczas praktykowane w makrze printujacym potegi, byloby kompletnie niedorzecznym pomyslem. Po ukonczeniu tej czynnosci taki plik prawdopodobnie nie bylby juz nikomu do niczego potrzebny, bo dane w nim zawarte bylyby nieaktualne o co najmniej kilka miesiecy. Zdecydowanie lepszym wyjsciem z tej sytuacji byloby wpisanie i przeciagniecie odpowiednich formul bezposrednio w arkuszu Excela.

Na szczescie z pomoca ida petle, za pomoca których wystarczy jeden raz opisac wielokrotnie wykonywana operacje (w tym przypadku wstawianie poteg w komórkach arkusza), a potem okreslic tylko liczbe powtórzen tej operacji.

Ponizej znajdziesz kod przedstawiajacy makro do printowania poteg zmodyfikowane w taki sposób, aby korzystalo z petli, oraz analize tego kodu linijka po linijce. 1
2
3
4
5
6
7
8
9
10
11
Sub wyswietlajPotegi(podstawa As Byte, ilePoteg As Integer, kolumna As Byte)
    Dim i As Integer
    Dim potega As Long

    potega = 1

    For i = 1 To ilePoteg
        Worksheets("Arkusz1").Cells(i, kolumna) = potega
        potega = potega * podstawa
    Next i
End Sub

Aby przetestowac dzialanie makra, wykonaj w oknie Immediate polecenie:
 
Call wyswietlajPotegi(2, 20, 1)
które powinno wyswietlic 20 pierwszych poteg dwójki w pierwszej kolumnie arkusza Arkusz1.

Procedura wyswietlajPotegi posiada teraz trzy argumenty wejsciowe:
podstawa: liczba typu Byte (a wiec z zakresu 0-255); jest to liczba, która bedzie podnoszona do potegi,
ilePoteg: liczba typu Integer; argument ten okresla ile pierwszych poteg danej liczby (podanej jako argument podstawa) ma zostac wyswietlonych w arkuszu,
kolumna: liczba typu Byte; okresla, w której kolumnie arkusza maja byc wyswietlone te potegi.
Dodatkowo w sekcji deklaracji zmiennych (wiersze 2-3) pojawiaja sie dwie kolejne zmienne:
i: zmienna liczbowa sluzaca jako licznik w petli; jej dzialanie zostanie szczególowo opisane w dalszej czesci lekcji przy okazji omawiania schematu dzialania petli,
potega: zmienna typu Long; przechowuje wartosci poszczególnych poteg; przy kazdym kolejnym powtórzeniu petli zmienna ta bedzie mnozona przez zmienna podstawa, tworzac tym samym kolejna potege.
W wierszu 5 do zmiennej potega przypisana zostaje liczba 1. Do tego momentu zmienna potega miala domyslna wartosc 0 i gdyby nie przypisano do niej wartosci 1, mnozenie jej przez zmienna podstawa, wykonywane przy kazdym kolejnym powtórzeniu petli, nie odnosiloby zadnego skutku i nadal wynosilaby ona 0.

Wreszcie w wierszach 7-10 znajduje sie petla printujaca poszczególne potegi w arkuszu.

Postac ogólna petli wyglada nastepujaco:  
 
 
For i = liczbaPoczatkowa To liczbaKoncowa
    'operacje do wykonania
Next i

Kazda petla rozpoczyna sie od slowa kluczowego For. Po tym slowie musi nastapic nazwa tzw. iteratora, czyli zmiennej przechowujacej liczbe powtórzen petli. Przyjelo sie, aby zmienna iteracyjna nazywac i (tak tez uczyniono w omawianym przykladzie), ale nie jest to konieczne, wiec mozesz nadac iteratorowi swoja wlasna nazwe. Zmienna iteracyjna nie rózni sie niczym od pozostalych zmiennych, dlatego, podobnie jak one, przed swoim pierwszym wystapieniem musiala zostac zadeklarowana.

Podstawowym zadaniem zmiennej iteracyjnej jest nadzorowanie, czy petla nie powinna juz zakonczyc swojego dzialania.

Wywolujac petle nalezy podac wartosc startowa (liczbaPoczatkowa) oraz koncowa (liczbaKoncowa) iteratora, na podstawie których sprawdza on stan wykonania petli.

Przy uruchomieniu petli do iteratora przypisywana jest wartosc poczatkowa okreslona w wierszu wywolania przez argument liczbaPoczatkowa. Po kazdym wykonaniu petli wartosc iteratora jest zwiekszana o 1, a przed przystapieniem do kolejnego powtórzenia sprawdzane jest czy aktualna wartosc iteratora nie przekracza maksymalnej wartosci (okreslonej w wierszu wywolania petli za pomoca argumentu liczbaKoncowa). Jezeli kompilator stwierdzi, ze wartosc zmiennej iteracyjnej przekroczyla juz górna granice, wykonywanie kodu zostaje przeniesione do polecen znajdujacych sie bezposrednio za petla.

Pamietaj, ze aby petla wykonala jakiekolwiek operacje, wartosc argumentu liczbaKoncowa nie moze byc mniejsza od wartosci argumentu liczbaPoczatkowa. Jezeli bedzie inaczej, kompilator juz przy pierwszym wywolaniu stwierdzi, ze wartosc iteratora (która przy starcie petli przyjmuje wartosc zmiennej liczbaPoczatkowa), jest wieksza od górnej granicy petli (czyli wartosci zmiennej liczbaKoncowa), a wiec nadszedl czas na zakonczenie dzialania petli i przejscie do kolejnych instrukcji.

Ponizej znajduje sie przyklad petli, której instrukcje nigdy nie zostana wykonane:  
 
 
For i = 5 To 3
    'operacje do wykonania
Next i

Zauwaz, ze juz na starcie zmienna iteracyjna i otrzymuje wartosc 5. Równoczesnie zostaje okreslone, ze petla ma zakonczyc swoje dzialanie w momencie, gdy zmienna ta osiagnie wartosc wieksza niz 3 - a wiec juz w momencie nadania zmiennej i wartosci poczatkowej przekracza ona górny limit, co doprowadza do automatycznego wyjscia z petli.

Najwazniejsza czescia petli jest jej wnetrze, w którym opisane sa instrukcje, jakie maja byc wykonane przy kazdym powtórzeniu petli.

W opisywanym przykladzie we wnetrzu petli znajduja sie dwie operacje: wpisanie wartosci zmiennej potega w odpowiedniej komórce arkusza oraz pomnozenie tej zmiennej przez podstawe potegi przechowywana w argumencie podstawa i stworzenie tym samym kolejnej potegi.

Zauwaz, ze w operacji printowania wartosci do arkusza wykorzystana zostala zmienna iteracyjna i. Dzieki temu, ze przy kazdym powtórzeniu petli jest ona zwiekszana o 1, kazda kolejna potega jest wypisywana jeden wiersz nizej od swojej poprzedniczki.

Wykorzystanie zmiennej iteracyjnej w operacjach znajdujacych sie wewnatrz petli jest powszechna praktyka i w zasadzie petle, które tego nie czynia, naleza do rzadkosci.

Ostatnim elementem konstrukcji petli jest wiersz zamkniecia:
 
Next i
skladajacy sie ze slowa kluczowego Next oraz nazwy iteratora.

Po dotarciu do wiersza zamkniecia petli, kompilator zwieksza wartosc iteratora o 1 i powraca do wiersza otwarcia petli. Kolejnym krokiem jest sprawdzenie czy po wykonanym przed momentem zwiekszeniu wartosci iteratora nie przekroczyla ona górnego limitu i ewentualne opuszczenie petli (w przypadku przekroczenia przez iterator górnej granicy) lub kontynuowanie jej wykonywania (w przypadku gdy wartosc iteratora nadal jest mniejsza niz górna granica petli).

Jak zatem zachowuje sie petla i poszczególne zmienne w omówionym przykladzie?

7
8
9
10
For i = 1 To ilePoteg
    Worksheets("Arkusz1").Cells(i, kolumna) = potega
    potega = potega * podstawa
Next i
Zmienna iteracyjna jest w tej petli zmienna i, dla której poczatkowa wartoscia jest liczba 1, a koncowa wartosc zmiennej ilePoteg (czyli liczba podana jako argument o takiej nazwie przy wywolaniu procedury; zalózmy, ze wywolales te procedure z argumentem ilePoteg = 20).

Za kazdym razem, kiedy wykonywanie kodu znajduje sie w wierszu otwarcia petli, zmienna iteracyjna sprawdzana jest pod katem przekraczania górnej granicy petli (nawet jezeli jest to dopiero pierwsze wywolanie tej petli). W tym przypadku zmienna i wynosi 1, a górna granica petli - 20, wiec petla nie musi byc zakonczona i wykonywanie kodu jest przekazywane do wnetrza petli.

Pierwsza instrukcja we wnetrzu petli jest polecenie:
8
Worksheets("Arkusz1").Cells(i, kolumna) = potega
czyli wyprintowanie w arkuszu Arkusz1 wartosci zmiennej potega (która wynosi 1, gdyz taka wartosc zostala jej nadana przed wejsciem do petli, w wierszu 5). Wartosc iteratora wynosi aktualnie 1, wiec zmienna zostanie wyswietlona w pierwszym wierszu arkusza oraz w kolumnie takiej, jaka okreslono za pomoca argumentu kolumna w momencie wywolywania procedury.

Druga czynnoscia wykonywana przez te petle jest pomnozenie zmiennej potega przez podstawe potegi przechowywana w zmiennej podstawa. Po wykonaniu tej operacji zmienna potega bedzie miala wartosc 2, czyli kolejna potege dwójki.

Nastepnie kompilator przechodzi do wiersza
10
Next i
w którym wartosc zmiennej iteracyjnej i jest zwiekszana o 1 (a wiec bedzie od teraz wynosila 2).

Po opuszczeniu wiersza zamkniecia petli wykonanie kodu zawsze wraca do wiersza otwarcia petli, gdzie kompilator ponownie sprawdza czy wartosc zmiennej iteracyjnej nie przekroczyla górnego limitu. Jak przed momentem wspomniano, iterator przyjal dopiero wartosc 2 (przy górnej granicy równej 20), a wiec ponownie wykonywane sa instrukcje zawarte we wnetrzu petli.

Wartosc zmiennej potega wynosi w tym momencie 2 i taki wynik zostanie teraz wyprintowany w arkuszu Arkusz1 w jego drugim wierszu (poniewaz, jak widzisz w kodzie, o wierszu, w którym bedzie wypisana zmienna potega decyduje wartosc iteratora i, która aktualnie wynosi 2). W kolejnym wierszu zmienna potega ponownie jest mnozona przez podstawe, tworzac tym samym kolejna potege dwójki, po czym kod jest przekazywany do wiersza zamkniecia petli, gdzie zmienna iteracyjna jest zwiekszana o 1 i przyjmuje teraz wartosc 3.

Opisana sekwencja operacji jest powtarzana tak dlugo, az wartosc iteratora osiagnie 20. Wówczas kompilator wykona jeszcze instrukcje zawarte we wnetrzu petli, poniewaz iterator nie przekracza górnej granicy petli, a jedynie sie z nia zrównuje - makro wyswietli wiec w dwudziestym wierszu arkusza wartosc dwudziestej potegi dwójki oraz zwiekszy wartosc zmiennej potega do dwudziestej pierwszej potegi dwójki. Ale po nadaniu zmiennej iteracyjnej w wierszu Next i kolejnej wartosci - 21, iterator nie przejdzie juz weryfikacji w wierszu otwarcia petli, poniewaz jego wartosc jest od tej pory wyzsza niz górny limit petli (okreslony na 20). W tym momencie makro opuszcza wiec petle i przechodzi do wykonywania kolejnych instrukcji, znajdujacych sie w kodzie pod ta petla (w omawianym przykladzie jest to juz tylko zamkniecie procedury slowem kluczowym End Sub).

Powrót do poczatku lekcji Zmiana kroku petli
Podczas omawiania przykladu wypisujacego w arkuszu potegi, wielokrotnie wspomniano, ze po dotarciu do wiersza zamkniecia petli (Next i), wartosc iteratora jest zwiekszana o 1. Nie dla kazdej petli jest to jednak prawda, poniewaz w rzeczywistosci sam mozesz zadecydowac o jaka wartosc bedzie powiekszany iterator przy kazdym wykonaniu petli - masz w tej kwestii calkowita dowolnosc i jako wartosc powiekszajaca iterator mozesz równie dobrze uzyc liczby naturalnej, jak i ulamka czy liczby ujemnej.

Ponizej znajduje sie omawiany wczesniej kod, zmodyfikowany tak, aby poszczególne potegi byly wyswietlane w co drugim wierszu (przed jego uruchomieniem i przetestowaniem wyczysc arkusz, tak aby poprzednie wpisy nie wymieszaly sie z nowymi). 1
2
3
4
5
6
7
8
9
10
11
Sub wyswietlajPotegi(podstawa As Byte, ilePoteg As Integer, kolumna As Byte)
    Dim i As Integer
    Dim potega As Long

    potega = 1

    For i = 1 To ilePoteg Step 2 
        Worksheets("Arkusz1").Cells(i, kolumna) = potega
        potega = potega * podstawa
    Next i
End Sub

Jak widzisz, jedynym nowym elementem, jaki pojawil sie w kodzie, jest polecenie Step 2 dopisane w wierszu otwarcia petli. W poprzednim przykladzie slowo kluczowe Step zostalo pominiete, co bylo równoznaczne z nadaniem petli wartosci domyslnej 1. W obecnej postaci petli, za kazdym razem, kiedy wykonanie kodu dojdzie do wiersza zamkniecia petli, wartosc iteratora bedzie zwiekszana o 2, a nie ja dotychczas o 1.

Zwróc tez uwage, ze w tej sytuacji zostanie wyswietlonych tylko dziesiec pierwszych poteg dwójki, poniewaz od wartosci startowej, wynoszacej 1, do górnej granicy petli równej 20, przy kazdorazowym zwiekszaniu iteratora o 2, nastapi tylko 10 wywolan petli.

Petla moze byc równiez skonstruowana w taki sposób, aby przy kazdym jej wywolaniu wartosc iteratora byla zmniejszana. Zasada dzialania jest w tym przypadku identyczna, nalezy po prostu w wierszu otwarcia petli wstawic po slowie kluczowym Step liczbe ujemna, o jaka ma byc pomniejszany iterator przy kazdym powtórzeniu petli.

1
2
3
4
5
6
7
8
9
10
11
Sub wyswietlajPotegi(podstawa As Byte, ilePoteg As Integer, kolumna As Byte)
    Dim i As Integer
    Dim potega As Long

    potega = 1

    For i = ilePoteg To 1 Step -1 
        Worksheets("Arkusz1").Cells(i, kolumna) = potega
        potega = potega * podstawa
    Next i
End Sub
Powyzsze makro jest kolejna modyfikacja makra wyswietlajacego w arkuszu dwadziescia pierwszych poteg dwójki, z tym ze teraz wyswietlane sa one w odwrotnej kolejnosci - od dwudziestego do pierwszego wiersza.

Zauwaz, ze w wierszu otwarcia poczatkowa wartosc iteratora jest wieksza od jej limitu, co jak wczesniej kilkukrotnie wspomniano powinno oznaczac automatyczne zakonczenie dzialania petli. Otóz w przypadku zadeklarowania w petli ujemnej wartosci Step, sytuacja ulega zmianie o 180 stopni - teraz górny limit staje sie dolnym limitem, a petla konczy dzialanie, kiedy wartosc iteratora jest od tego limitu mniejsza.

Wykorzystujac slowo kluczowe Step mozna bardzo latwo stworzyc nieskonczona petle. Wystarczy wpisac w wierszu otwarcia petli polecenie Step 0.

Powrót do poczatku lekcji Zmiana wartosci iteratora wewnatrz petli
We wszystkich omawianych dotychczas petlach wartosc iteratora byla zmieniana tylko poprzez wiersz zamkniecia petli - Next i. Nie oznacza to jednak, ze zmienna iteracyjna nie moze byc modyfikowana wewnatrz petli.

Ponizej znajduje sie przyklad makra, które wypisuje w arkuszu wszystkie daty przypadajace w dni powszednie, modyfikujac wartosc iteratora tak, aby przeskakiwal dni przypadajace w weekend. 1
2
3
4
5
6
7
8
9
10
11
12
13
Sub wyswietlajDniPowszednie()
    Dim data As Date
    Dim n As Long

    n = 1

    For data = #2010-01-01# To #2010-12-31#
        Cells(n, 1) = Format(data, "Long Date")
        n = n + 1
        If Weekday(data, vbMonday) = 5 Then data = data + 2
    Next data

End Sub

W makrze zadeklarowane zostaly dwie zmienne:
data - zmienna typu Date. Przechowuje kolejne daty, a równoczesnie sluzy w petli jako zmienna iteracyjna,
n - zmienna typu Long. Przechowuje numer wiersza, w którym ma byc wyswietlona kolejna data. Wartosc tej zmiennej jest zwiekszana o 1 przy kazdym kolejnym wykonaniu petli, tak aby kazda kolejna data byla wypisana jeden wiersz nizej od poprzedniej.
W poprzednich przykladach jako numer wiersza wykorzystywana byla zmienna iteracyjna. W tym przypadku nie mozna zastosowac iteratora jako numeru wiersza z dwóch powodów: poczatkowa wartoscia iteratora jest data 1 stycznia 2010, której odpowiada liczba 40 179, a wiec printowanie rozpoczeloby sie dopiero od wiersza o takim numerze; poza tym, aby pominac soboty i niedziele, wartosc iteratora czasami przeskakuje o 2, wiec gdyby zostal on wykorzystany jako numer wiersza, w arkuszu równiez wystepowalyby dwuwierszowe przerwy.
W wierszu 5 kodu do zmiennej n zostaje przypisana poczatkowa wartosc 1, gdyz wypisywanie dat ma sie rozpoczac od pierwszego wiersza arkusza.

W wierszu 6 rozpoczyna sie petla, w której iteratorem jest zmienna data, wartoscia poczatkowa 1 stycznia 2010, a wartoscia koncowa 31 grudnia 2010.

Wnetrze petli sklada sie z trzech polecen.

Najpierw aktualna wartosc zmiennej data jest wyswietlana w arkuszu, w jego pierwszej kolumnie i wierszu okreslonym przez zmienna n (przy pierwszym wykonaniu petli jest to pierwszy wiersz arkusza). Zmienna Data przed wyswietleniem w arkuszu jest jeszcze obrabiana przez funkcje Format z parametrem Long Date, która formatuje date do postaci zawierajacego pelna nazwe miesiaca (np. 1 styczen 2010).

W kolejnym wierszu wartosc zmiennej n jest zwiekszana o 1, tak aby kaza kolejna data byla wyswietlana w jednym wierszu ponizej swojej poprzedniczki.

W ostatnim wierszu wnetrza petli znajduje sie instrukcja warunkowa, sprawdzajaca czy aktualna data, przechowywana w zmiennej data, przypada w piatek. Jezeli tak sie dzieje, do wartosci iteratora dodawana jest liczba 2, tak aby ominac dwa dni: sobote oraz niedziele. Zwróc uwage, ze po dodaniu do piatkowej daty dwóch dni, zmienna data przyjmie wartosc bedaca data niedzielna. Nalezy jednak pamietac, ze w wierszu zamkniecia petli (Next data), wartosc zmiennej iteracyjnej jest dodatkowo zwiekszana o 1, wiec ostatecznie przed kolejnym wkroczeniem kodu do wnetrza petli zmienna data bedzie przechowywala poniedzialkowa date.

Manipulujac wartoscia iteratora we wnetrzu petli równiez mozna latwo stworzyc nieskonczona petle.

Wystarczy przed wierszem zamkniecia petli odejmowac od aktualnej wartosci iteratora 1 (lub inna liczbe przypisana w wierszu otwarcia do argumentu Step). Wówczas, tuz przed wejsciem kodu do linii zamykajacej petle, iterator bedzie zmniejszany o 1, a w samym wierszu zamkniecie bedzie zwiekszany o 1, w zwiazku z czym caly czas bedzie mial te sama wartosc i nigdy nie przekroczy górnego limitu petli.

Powrót do poczatku lekcji Opuszczenie petli przed jej zakonczeniem
Czasem zdarzaja sie sytuacje, ze pomimo okreslenia górnego limitu petli, powinna ona zakonczyc swoje dzialanie przed jego osiagnieciem, poniewaz po spelnieniu okreslonego warunku, jej dalsze dzialanie staje sie bezcelowe.

Przyklad takiej petli znajdziesz w przedstawionej ponizej funkcji znajdzOdPrawej. Funkcja ta znajduje pierwsze od prawej strony wystapienie znaku okreslonego jako argument char w tekscie podanym jako argument tekst.

Petla powinna sprawdzic po kolei wszystkie znaki podanego tekstu, poczawszy od ostatniego, a na pierwszym skonczywszy. Jednak w momencie, gdy szukany znak zostanie odnaleziony, petla powinna zakonczyc dzialanie, poniewaz wynik funkcji jest juz w tym momencie znany i nie ma sensu marnowanie czasu na dalsze wykonywanie petli, skoro i tak w zaden sposób nie wplynie to juz na koncowy wynik funkcji.

Ponizej znajduje sie kod oraz jego analiza: 1
2
3
4
5
6
7
8
9
10
Function znajdzOdPrawej(char As String, tekst As String) As Integer
    Dim i As Integer

    For i = Len(tekst) To 1 Step -1
        If Mid(tekst, i, 1) = char Then
            znajdzOdPrawej = i
            Exit For
        End If
    Next i
End Function

Funkcja wymaga zadeklarowania dwóch argumentów: char - czyli znaku, który bedzie szukany w tekscie bazowym oraz sam tekst bazowy, okreslony w powyzszym przykladzie jako tekst.

Oprócz tego w funkcji zadeklarowana jest zmienna typu Integer, która posluzy za zmienna iteracyjna w petli.

Cala funkcja sklada sie jedynie z opisywanej petli. W wierszu otwarcia petli jako wartosc poczatkowa iteratora zostala podana dlugosc tekstu bazowego, która jest wyliczana za pomoca funkcji Len(tekst) (o funkcji Len mozesz poczytac tutaj).

Jako koncowy limit petli podana zostala wartosc 1. Okreslono równiez argument Step i nadano mu wartosc -1, co oznacza, ze po kazdym powtórzeniu petli wartosc iteratora bedzie zmniejszana o 1.

Wnetrze petli sklada sie tylko z jednej instrukcji warunkowej, która sprawdza czy dany znak tekstu bazowego jest poszukiwanym znakiem, okreslonym jako argument char. Do sprawdzania poszczególnych znaków wyrazu bazowego wykorzystana zostala funkcja Mid(tekst, i, 1), która zwraca pojedynczy znak z tekstu tekst, znajdujacy sie w tym tekscie na pozycji takiej, jak argument i (czyli na pozycji takiej, jaka jest aktualnie wartosc zmiennej iteracyjnej w petli). Przy pierwszym wykonaniu petli sprawdzany wiec bedzie ostatni znak tekstu bazowego, przy drugim wykonaniu - przedostatni, itd. az zmienna iteracyjna osiagnie wartosc 1, czyli sprawdzony bedzie pierwszy znak tekstu.

W instrukcji warunkowej znajdujacej sie w petli pominiety zostal blok Else, poniewaz w sytuacji, gdy sprawdzany znak nie jest szukanym znakiem, nie maja byc wykonywane zadne czynnosci poza przejsciem do nastepnego wykonania petli.

Natomiast w sytuacji, gdy okaze sie, ze sprawdzany znak jest szukanym znakiem, jako wartosc funkcji zostaje przypisana aktualna wartosc zmiennej iteracyjnej i, poniewaz na takiej wlasnie pozycji zostal znaleziony poszukiwany znak (wiersz 6).

Oprócz tego, w bloku czynnosci przewidzianych dla spelnionego warunku znajduje sie instrukcja Exit For (wiersz 7), która oznacza natychmiastowe opuszczenie petli bez wzgledu na to, jaka jest aktualna wartosc zmiennej iteracyjnej. Tak jak wczesniej wspomniano, polecenie to jest w tej sytuacji uzyte, poniewaz po odnalezieniu w tekscie bazowym szukanego znaku znana jest juz koncowa wartosc funkcji i nie ma potrzeby dalszego wykonywania tej petli. W zasadzie dalsze wykonywanie petli mogloby nawet znieksztalcic wynik funkcji, poniewaz jesli szukany znak zostalby ponownie odnaleziony w bazowym tekscie (blizej poczatku tego tekstu), to wynik funkcji zostalby nadpisany i funkcja zwracalaby pierwsze wystapienie szukanego znaku od lewej strony, zamiast od prawej.

Na koniec mozesz sprawdzic dzialanie napisanej przed momentem funkcji znajdzOdPrawej, wpisujac kilka zapytan w oknie Immediate:

Wyniki funkcji znajdzOdPrawej

Powrót do poczatku lekcji Zagniezdzanie petli
Petle, podobnie jak instrukcje warunkowe czy funkcje, moga byc w sobie zagniezdzane.

Przyklad takiej zagniezdzonej petli znajduje sie w ponizszym makrze, które wyswietla w arkuszu tabliczke mnozenia o dowolnym rozmiarze (podawanym jako argument przy wywolywaniu makra). 1
2
3
4
5
6
7
8
9
10
Sub tabliczkaMnozenia(rozmiar As Integer)
    Dim i As Integer
    Dim j As Integer

    For i = 1 To rozmiar
        For j = 1 To rozmiar
            Cells(i, j) = i * j
        Next j
    Next i
End Sub

W procedurze tabliczkaMnozenia zadeklarowany zostal jeden argument wejsciowy - rozmiar, który decyduje o rozmiarze wyswietlanej w arkuszu tabliczki mnozenia.

Oprócz tego procedura zawiera dwie zmienne typu Integer - i oraz j, które pelnia role iteratorów w petlach.

Wiersz 5 jest wierszem otwarcia pierwszej petli (z iteratorem i), która zostanie wykonana tyle razy, ile wynosi wartosc argumentu rozmiar. Kazde pojedyncze wykonanie tej petli spowoduje wyswietlenie w arkuszu kolejnego wiersza tabliczki mnozenia.

We wnetrzu tej petli zagniezdzona jest druga petla (wiersze 6-8), w której iteratorem jest zmienna j. Liczba powtórzen tej petli takze jest równa argumentowi rozmiar. Jezeli wiec wywolujac procedure tabliczkaMnozenia jako wartosc argumentu rozmiar podales przykladowo 40, to pierwsza petla zostanie wykonana 40 razy, a w kazdym jej pojedynczym wykonaniu dodatkowo 40 razy wykonana zostanie petla, która jest w niej zagniezdzona (ta druga petla zostanie wiec wykonana lacznie 1600 razy). Przy kazdym powtórzeniu wewnetrznej petli wykonywane jest jedno polecenie:
7
Cells(i, j) = i * j
które mnozy przez siebie wartosc obu iteratorów, a nastepnie wyswietla wynik tego mnozenia w aktywnym arkuszu, w wierszu takim, jaka jest aktualna wartosc iteratora i i kolumnie o numerze równym aktualnej wartosci iteratora j.

Schemat dzialania powyzszej procedury jest wiec nastepujacy (zalózmy, ze przy wywolaniu funkcji jako argument rozmiar podano 40): kiedy wykonanie kodu dociera do wiersza 5 zostaje otwarta pierwsza petla, a iterator i przyjmuje wartosc 1. W kolejnym wierszu (6), otwarta zostaje druga petla, której iterator (czyli zmienna j) równiez otrzymuje poczatkowa wartosc 1. Górna granica tej petli jest wartosc argumentu rozmiar, a wiec zostanie ona wykonana 40 razy. Zwróc uwage, ze podczas powtarzania wewnetrznej petli wartosc iteratora i caly czas jest równa 1, poniewaz kod nie dotarl jeszcze do wiersza zamkniecia pierwszej petli. Natomiast wartosc iteratora tej wewnetrznej petli (j) przy kazdym jej powtórzeniu zwieksza sie o 1. W zwiazku z tym, przy pierwszym wykonaniu zagniezdzonej petli wykonana zostanie operacja
7
Cells(1, 1) = 1 * 1
potem
7
Cells(1, 2) = 1 * 2
7
 
Cells(1, 3) = 1 * 3
'...
itd. Dopiero po wykonaniu 40 takich operacji opuszczona zostanie wewnetrzna petla i kompilator natrafi na wiersz zamkniecia pierwszej petli. Wówczas wartosc iteratora i zostanie zwiekszona o 1 (bedzie teraz wynosic 2) i wykonywanie kodu ponownie trafi do wewnetrznej petli. Caly ten proces powtarzany bedzie tak dlugo, az wartosc iteratora i przekroczy górny limit wyznaczony dla zewnetrznej petli (czyli w tym przypadku 40).

Powrót do poczatku lekcji