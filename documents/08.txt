GETTING INPUT FROM USERS
------------------------------------------------

Besides the <code>MsgBox</code> function, designed for displaying messages and basic interaction with users (Yes/No, Confirm/Abort), there is also another VBA built-in function that allows us to communicate with users - <code>InputBox</code>.

InputBox is intended to get more complex information from users, like passwords, names, dates or numeric values.

Copy the code below and paste it into VBA editor:
Sub gettingValueFromUser()
	Dim text As String
    
	text = InputBox("Value to be printed in A1 cell")
	Cells(1,1) = text
End Sub


All this code does is display the window like below on the screen

InputBox window

get the value input by user and put this value into cell <i>A1</i> of the currently active worksheet.

In the second line of the code the <span class="keyword">String</code> variable <code>text</code> is declared.

In the fourth line variable <code>text</code> is assigned with the result of function <code>InputBox</code>, so in fact the value typed by user in the pop-up window (the way this function works will be discussed in a moment).


In the final row before procedure end line the cell <i>A1</i> of the active Excel sheet is populated with the value of variable <code>text</code>.


In the procedure above the variable <code>text</code> could be omitted and the result of the function <code>InputBox</code> could be put directly into cell <i>A1</i> of the active worksheet. Using temporary variables makes the code longer, however, it is done intentionally and the purpose is to make it your habit to always declare variables.


Let's discuss in details the fourth row of the code where the function <code>InputBox</code> appears for the first time.

The syntax of <code>InputBox</code> function looks like below:
		Function InputBox(Prompt As String, _
		    Optional Title As String, Optional Default, _
		    Optional XPos As Single, Optional YPos As Single, _
		    Optional HelpFile, Optional Context) As String


<code>Prompt</code> and <code>Title</code> parameters have been already discussed in details in the chapter about <code>MsgBox</code> function. They works exactly the same in the function <code>InputBox</code>: <code>Prompt</code> defines what text is displayed in the pop-up window (it should be instruction what value should be input, i.e. <i>Input your birth date</i>)and <code>Title</code> defines the caption to be displayed on the window title bar. For better understanding both those sections are marked on the picture below - Title section is bordered in green and Prompt section in red.


InputBox window properties


With <code>Default</code> parameter you can define what value the input box window should be initialized with. If this parameter is left empty when invoking <code>InputBox</code> function, the textbox on the pop up window will be also empty.

<code>XPos</code> and <code>YPos</code> parameters defines the position on the screen where the pop up window should appear initially (after it is already displayed you can move it wherever you want).
 <code>XPos</code> defines the distance between pop up window and the left edge of the screen and <code>YPos</code> the distance between pop up window and the top edge of the screen. Both those values are measured in units called twips (1440 twips = 1 inch).

If both those values are omitted, the input box window will be displayed on the middle of the screen horizontally and about on the top one-third of the screen vertically.

<code>XPos</code> and <code>YPos</code> parameters must be passed together. If you give only one of those parameters and leave the second one empty, the function behaves as if none of them was passed.


Function <code>InputBox</code>, opposite to the <code>MsgBox</code>, doesn't allow to change the number and names of the buttons displayed on the pop-up window.
The only available option is the set of two buttons - <i>OK</i> and <i>Cancel</i>.



Below are two examples of <code>InputBox</code> function, each of them consisting of the code and the picture showing how the window was displayed (examples are designed to call them in <i>Immediate window</i>, so we recommend to test it by yourself).



Input box asking about date of birth with default value 3 January 1983, laid out 1 inch from the top and 1 inch from the left edge of the screen.
?InputBox("Give your birth date", "Date of birth", #1983-01-03#, 1440, 1440)

InputBox with question about date of birth


Input box asking about salary with default value 4000 without initial position defined
?InputBox("Give your salary", "Salary", 4000)

InputBox with question about salary






SIMPLE DIALOG APPLICATIONs
-------------------------------------------------------
	[+] Aby utrwalic wiedze zdobyta w dotychczasowych lekcjach, przeanalizuj umieszczone ponizej przyklady dwóch niewielkich aplikacji korzystajacych z 		omówionych w niniejszej lekcji sposobów komunikacji z uzytkownikiem oraz z kilku innych funkcjonalnosci przedstawionych w poprzednich lekcjach.

	[+] Obliczanie pensji netto
		Pierwszy przyklad bedzie sie opieral na omawianej juz i kilkakrotnie modyfikowanej funkcji do obliczania pensji netto. Dodatkowym elementem 		bedzie jednak pobieranie informacji o pensji brutto bezposrednio od uzytkownika, do czego wykorzystana zostanie funkcja InputBox, oraz 		wyswietlenie obliczonej pensji netto w oddzielnym oknie zapomoca funkcji MsgBox.

		Sub zarobki()
		    Dim pensjaBrutto As Long
		    Dim pensjaNetto As Long

		    pensjaBrutto = InputBox("Podaj wysokosc pensji brutto", "Pensja brutto")
		    pensjaNetto = pensjaPoOpodatkowaniu(pensjaBrutto)

		    Call MsgBox("Twoja pensja netto wynosi: " & pensjaNetto, vbOKOnly, "Pensja netto") 
		End Sub

		Function pensjaPoOpodatkowaniu(podstawa As Long) As Long
		    pensjaPoOpodatkowaniu = podstawa - (podstawa * 0.18)
		End Function


After studying the previous lesson most of the code above should be clear for you.

	[+] W wierszach 2-3 zadeklarowane sa dwie zmienne typu Long: pensjaBrutto i pensjaNetto.

	[+] W wierszach 5-6 do zmiennej pensjaBrutto zostaje przypisany wynik dzialania funkcji InputBox, a wiec to, co uzytkownik wpisze w wyswietlonym oknie.

	[+] Przy wywolaniu funkcji InputBox, oprócz obowiazkowego argumentu Prompt, który przyjmuje wartosc Podaj wysokosc pensji brutto, podany zostal równiez 		argument opcjonalny Title, do którego przypisano tekst Pensja brutto (oznacza to, ze taki tekst pojawi sie na niebieskim pasku u góry okna z 		zapytaniem).

	[+] Zwróc uwage, ze funkcja InputBox zwraca wartosci tekstowe, wiec nawet jesli wpiszesz w jej oknie liczbe lub date, to wynikiem funkcji bedzie tekstowa 		reprezentacja tej liczby lub daty. Na szczescie, jak wspomniano w lekcji omawiajacej typy danych, przy przypisywaniu tekstowych reprezentacji 		liczb do zmiennych liczbowych, jezyk VBA automatycznie konwertuje je do wartosci liczbowych.

	[+] W wierszu 7 do zmiennej pensjaNetto zostaje przypisany wynik funkcji pensjaPoOpodatkowaniu, w której argumentem podstawa jest wartosc zmiennej 		pensjaBrutto, czyli wartosc, która uzytkownik podal w oknie InputBox.

	[+] W wierszu 9 zostaje wywolana funkcja MsgBox, która wyswietla na ekranie informacje o wysokosci pensji netto dla podanej wczesniej pensji brutto.

	[+] Jak widzisz na podstawie argumentów podanych przy wywolywaniu funkcji MsgBox, okno komunikatu bedzie posiadalo tylko przycisk OK, a na pasku tytulu 		pojawi sie napis Pensja netto.

	[+] Powyzsza aplikacja pozostawia jeszcze troche do zyczenia, glównie w kwestii sprawdzania poprawnosci danych. Wyobraz sobie bowiem, ze uzytkownik w 		oknie z pytaniem o wysokosc pensji brutto zamiast wartosci liczbowej wpisze tekst. W dopietej na ostatni guzik aplikacji w takiej sytuacji 		powinien pojawiac sie komunikat o nieprawidlowym formacie danych wraz z informacja, ze w tym polu wymagana jest liczba.

	[+] Omówiona przed chwila aplikacja nie jest uodporniona na tego typu zachowania uzytkowników i w przypadku podania wartosci tekstowej zostanie 		wygenerowany blad, a cale makro przerwie swoje dzialanie wyswietlajac na ekranie zupelnie niezrozumialy dla koncowego uzytkownika komunikat VBA 		zawierajacy numer bledu. W profesjonalnych aplikacjach nie ma miejsca na takie sytuacje - uzytkownik nigdy nie powinien ogladac komunikatów o 		bledach powstalych podczas wykonywania kodu.

	[+] W kolejnej lekcji poznasz jednak instrukcje warunkowa If ... Then, która doskonale nadaje sie do tego, zeby wyeliminowac te niedoskonalosc aplikacji.

	[+] Obliczanie liczby przezytych miesiecy, tygodni, dni itd.
		Drugi przyklad prezentuje aplikacje, która na podstawie podanej przez uzytkownika daty urodzenia oblicza liczbe przezytych przez niego miesiecy, 		tygodni oraz dni i wyswietla te informacje w oknie z komunikatem.
		
		Sub obliczanieCzasu()
		    Dim dataUrodzenia As Date
		    Dim miesiace As Long
		    Dim tygodnie As Long
		    Dim dni As Long

		    dataUrodzenia = InputBox("Podaj date urodzenia", "Data urodzenia")
		    miesiace = DateDiff("m", dataUrodzenia, Date)
		    tygodnie = DateDiff("ww", dataUrodzenia, Date)
		    dni = DateDiff("d", dataUrodzenia, Date)

		    Call MsgBox("Dotychczas przezyles: " & vbCrLf & _
                		miesiace & " miesiecy" & vbCrLf & _
		                tygodnie & " tygodni" & vbCrLf & _
                		dni & " dni", vbOKOnly, "Ile juz przezyles")

		End Sub


	[+] W wierszach 2-5 znajduja sie deklaracje zmiennych wykorzystanych w tej aplikacji. Pierwsza z nich jest zmienna typu datowego dataUrodzenia, do 		której, jak wskazuje jej nazwa, przypisana zostanie pózniej wprowadzona przez uzytkownika data urodzenia. Oprócz niej w aplikacji wykorzystane sa 		trzy zmienne typu Long - miesiace, tygodnie oraz dni, do których przypisana bedzie odpowiednia liczba miesiecy, tygodni i dni.

	[+] W wierszu 7 do zmiennej dataUrodzenia zostaje przypisany wynik dzialania funkcji InputBox, czyli data, jaka uzytkownik wpisze w wyswietlonym oknie.

	[+] W kolejnych trzech wierszach do zmiennych miesiace, tygodnie i dni przypisana zostaje liczba miesiecy, tygodni i dni jakie uplynely od daty urodzenia 		wprowadzonej przez uzytkownika do daty dzisiejszej.

	[+] Do obliczenia róznicy pomiedzy dwiema datami - dzisiejsza i podana przez uzytkownika - zastosowano wbudowana funkcje DateDiff, której dzialanie 		omówiono szczególowo w poprzednim rozdziale.

	[+] Aby pobrac aktualna date wykorzystano natomiast inna wbudowana funkcje - Date.

	[+] Po obliczeniu wszystkich róznic w datach i przypisaniu ich do zmiennych, w wierszach 12-15 zostaje wywolane okno komunikatu, w którym wyswietlono 		wartosci tych zmiennych.

	[+] Okreslajac tekst komunikatu kilkukrotnie zastosowano slowo kluczowe vbCrLf, co pozwolilo na wyswietlenie kazdej wyliczonej wartosci w oddzielnej 		linijce.